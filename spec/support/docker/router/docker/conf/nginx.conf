user daemon;
daemon off;
master_process off;
worker_processes 1;
error_log stderr;

events {
    worker_connections 1024;
}

http {
    upstream backend {
      server app:3000;
    }

    server {
    listen 80;
    server_name example.com;
 
    root   /;
    index  index.html;

    location / {
        try_files $uri @prerender;
        add_header X-Prerender-Works 'test';
    }
 
    location @prerender {
        proxy_set_header X-Prerender-Token fKaq9iCNoXrOvIkgEN6l;
        
        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }
        
        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8;
 
        if ($prerender = 1) {
            
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            #set $prerender "service.prerender.io";
            #rewrite .* /$http_x_forwarded_proto://$host$request_uri? break;
            #proxy_pass http://$prerender;
            rewrite .* /index.html break;
        }
        if ($prerender = 0) {
            rewrite .* /index.html break;
        }
    }
}
}
